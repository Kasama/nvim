###########################################################################
#                            TextMate Snippets                            #
#                            	User Defined 							  #
###########################################################################

priority -50

snippet kasama "//Kasama"
//--------------------------------------------------------------------------------------------------
//-- ___   ___         __         ____________         __         ___      ___         __         --
//-- |:|   /:/        /::\        |::::::::::|        /::\        |::\    /::|        /::\        --
//-- |:|  /:/        /::::\       |::/¨¨¨¨¨¨¨¨       /::::\       |:::\  /:::|       /::::\       --
//-- |:| /:/        /::/\::\      |::|              /::/\::\      |::::\/::::|      /::/\::\      --
//-- |:|/:/        /::/__\::\     |::\________     /::/__\::\     |::|\::/|::|     /::/__\::\     --
//-- |:|\:\       /::/::::\::\    |::::::::::|    /::/::::\::\    |::| \/ |::|    /::/::::\::\    --
//-- |:| \:\     /::/¨¨¨¨¨¨\::\   ¨¨¨¨¨¨¨¨\::|   /::/¨¨¨¨¨¨\::\   |::|    |::|   /::/¨¨¨¨¨¨\::\   --
//-- |:|  \:\   /::/        \::\          /::|  /::/        \::\  |::|    |::|  /::/        \::\  --
//-- |:|   \:\ /::/          \::\ |::::::::::| /::/          \::\ |::|    |::| /::/          \::\ --
//-- ¨¨¨   ¨¨¨ ¨¨¨            ¨¨¨ ¨¨¨¨¨¨¨¨¨¨¨¨ ¨¨¨            ¨¨¨ ¨¨¨¨    ¨¨¨¨ ¨¨¨            ¨¨¨ --
//------------------------------------------------------------------------------------------Codes---
//------------------------------${1:Program Name}------------------------------------
//--------------------------------------------------------------------------------------------------
${0}
endsnippet

snippet def "#define ..."
#define ${1}
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif // $1
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
	${0:${VISUAL:\/*Code Block*\/}}
#endif
endsnippet

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet Inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[]){

	${0:${VISUAL:\/*Code Block*\/}}

	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:$2++}){
	${0:${VISUAL:\/*Code Block*\/}}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:$2++}){
	${0:${VISUAL:\/*Code Block*\/}}
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */
endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet while "while loop"
while(${1:\/* condition *\/}) {
	${VISUAL}${0}
}
endsnippet

snippet do "do...while loop (do)"
do {
	${VISUAL}${0}
} while(${1:\/* condition *\/});
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */}){
	${0:${VISUAL:\/*Code Block*\/}}
}
endsnippet

snippet else "else .. (else)"
else {
	${0:${VISUAL:\/*Code Block*\/}}
}
endsnippet

snippet elif "else if .. (elif)"
else if (${1:/* condition */}) {
	${0:${VISUAL:\/*Code Block*\/}}
}
endsnippet

snippet ifelse "if .. else (ifelse)"
if (${1:/* condition */}){

	${0:${VISUAL:\/*Code Block*\/}}

}else{

	${2:/* else */}

}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet scanf "scanf .. (scanf)"
scanf("${1:%s}"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet struct "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}{
	${0:${VISUAL:\/*Data*\/}}
};
endsnippet

snippet func "function" b
${1:void} ${2:function_name}(${3}){

	${0:${VISUAL:\/*Body*\/}}

}
endsnippet

snippet comment "comment"
/*
	${1:${VISUAL:Comment}}
*/
${0}
endsnippet

snippet funcd "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

# vim:ft=snippets:
